// Generated by CoffeeScript 1.3.3
(function() {
  var Users, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  module.exports = Users = (function() {

    function Users(client) {
      this.client = client;
      this.deleteRoles = __bind(this.deleteRoles, this);

      this.postRoles = __bind(this.postRoles, this);

      this.getRoles = __bind(this.getRoles, this);

      this.deleteIdentity = __bind(this.deleteIdentity, this);

      this.postIdentity = __bind(this.postIdentity, this);

      this.resetPasswordToken = __bind(this.resetPasswordToken, this);

      this.resetPassword = __bind(this.resetPassword, this);

      this.updatePassword = __bind(this.updatePassword, this);

      this.update = __bind(this.update, this);

      this["delete"] = __bind(this["delete"], this);

      this.getX = __bind(this.getX, this);

      this.lookup = __bind(this.lookup, this);

      this.getByIds = __bind(this.getByIds, this);

      this.all = __bind(this.all, this);

      this.getApps = __bind(this.getApps, this);

      this.get = __bind(this.get, this);

      this.getUserOrOrganizationByName = __bind(this.getUserOrOrganizationByName, this);

      this.createLocal = __bind(this.createLocal, this);

      if (!this.client) {
        throw new Error("client parameter is required");
      }
    }

    Users.prototype.createLocal = function(username, email, password, cb) {
      var data;
      if (cb == null) {
        cb = function() {};
      }
      data = {
        username: username,
        email: email,
        password: password
      };
      return this.client.post("/users", data, null, cb);
    };

    Users.prototype.getUserOrOrganizationByName = function(name, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this.client.get("/entities/" + name, null, cb);
    };

    Users.prototype.get = function(id, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this.client.get("/users/" + id, null, cb);
    };

    Users.prototype.getApps = function(id, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this.client.get("/users/" + id + "/apps", null, cb);
    };

    Users.prototype.all = function(actor, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this.client.get("/users", actor, cb);
    };

    Users.prototype.getByIds = function(ids, cb) {
      var idList;
      if (ids == null) {
        ids = [];
      }
      if (cb == null) {
        cb = function() {};
      }
      idList = ids.join(',');
      return this.client.get("/users/by-ids?ids=" + idList, null, cb);
    };

    Users.prototype.lookup = function(q, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this.client.get("/users/lookup?q=" + (encodeURIComponent(q)), null, cb);
    };

    Users.prototype.getX = function(id, actor, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this.client.get("/users/" + id, actor, cb);
    };

    Users.prototype["delete"] = function(id, actor, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this.client["delete"]("/users/" + id, actor, cb);
    };

    Users.prototype.update = function(id, data, actor, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this.client.patch("/users/" + id, data, actor, cb);
    };

    Users.prototype.updatePassword = function(id, newPassword, actor, cb) {
      var data;
      if (cb == null) {
        cb = function() {};
      }
      data = {
        password: newPassword
      };
      return this.client.put("/users/" + id + "/password", data, actor, cb);
    };

    Users.prototype.resetPassword = function(email, cb) {
      var data;
      if (cb == null) {
        cb = function() {};
      }
      data = {
        email: email
      };
      return this.client.post("/users/reset-password", data, null, cb);
    };

    Users.prototype.resetPasswordToken = function(token, password, cb) {
      var data;
      if (cb == null) {
        cb = function() {};
      }
      data = {
        password: password
      };
      return this.client.put("/users/reset-password/" + token, data, null, cb);
    };

    Users.prototype.postIdentity = function(userId, provider, v1, v2, profile, cb) {
      var data;
      data = {
        provider: provider,
        v1: v1,
        v2: v2,
        profile: profile
      };
      return this.client.post("/users/" + userId + "/identities", data, null, cb);
    };

    Users.prototype.deleteIdentity = function(userId, identityId, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this.client["delete"]("/users/" + userId + "/identities/" + identityId, null, cb);
    };

    Users.prototype.getRoles = function(userId, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this.client.get("/users/" + userId + "/roles", null, cb);
    };

    Users.prototype.postRoles = function(userId, roles, cb) {
      var data;
      if (roles == null) {
        roles = [];
      }
      if (cb == null) {
        cb = function() {};
      }
      data = {
        roles: roles
      };
      return this.client.post("/users/" + userId + "/roles", data, null, cb);
    };

    Users.prototype.deleteRoles = function(userId, role, cb) {
      if (cb == null) {
        cb = function() {};
      }
      return this.client["delete"]("/users/" + userId + "/roles/" + role, null, cb);
    };

    return Users;

  })();

}).call(this);
